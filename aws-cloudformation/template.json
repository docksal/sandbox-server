{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Sandbox server template",

  "Mappings" : {
    "Region2AMI" : {
      "ap-south-1" : { "AMI" : "ami-0d773a3b7bb2bb1c1" },
      "eu-west-3" : { "AMI" : "ami-08182c55a1c188dee" },
      "eu-west-2" : { "AMI" : "ami-0b0a60c0a2bd40612" },
      "eu-west-1" : { "AMI" : "ami-00035f41c82244dab" },
      "ap-northeast-2" : { "AMI" : "ami-06e7b9c5e0c4dd014" },
      "ap-northeast-1" : { "AMI" : "ami-07ad4b1c3af1ea214" },
      "sa-east-1" : { "AMI" : "ami-03c6239555bb12112" },
      "ca-central-1" : { "AMI" : "ami-0427e8367e3770df1" },
      "ap-southeast-1" : { "AMI" : "ami-0c5199d385b432989" },
      "ap-southeast-2" : { "AMI" : "ami-07a3bd4944eb120a0" },
      "eu-central-1" : { "AMI" : "ami-0bdf93799014acdc4" },
      "us-east-1" : { "AMI" : "ami-0ac019f4fcb7cb7e6" },
      "us-east-2" : { "AMI" : "ami-0f65671a86f061fcd" },
      "us-west-1" : { "AMI" : "ami-063aa838bd7631e0b" },
      "us-west-2" : { "AMI" : "ami-0bbe6b35405ecebdb" }
    }
  },
  "Resources" : {
    "EC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t2.micro",
	"ImageId" : { "Fn::FindInMap" : [ "Region2AMI", { "Ref" : "AWS::Region" }, "AMI" ]},
	"KeyName" : "$keyname",
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sda1",
            "Ebs" : { "VolumeSize" : "8" } 
          },{
            "DeviceName" : "/dev/sdp",
            "Ebs" : { "VolumeSize" : "100" }
          }
        ],
	"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [


        "#!/bin/bash\n",
        "\n",
        "# This is a startup script for a Docksal Sandbox server in GCP.\n",
        "# It installs and configures Docksal on a bare Ubuntu machine (tested with Ubuntu 18.04 Minimal).\n",
        "#\n",
        "# The startup script log can be views via \"gcloud compute ssh vm-sandbox-test -- tail -f /var/log/syslog\"\n",
        "\n",
        "set -x  # Print commands\n",
        "set -e  # Fail on errors\n",
        "\n",
        "# Persistent disk settings\n",
        "DATA_DISK=\"/dev/xvdp\"\n",
        "MOUNT_POINT=\"/mnt/data\"\n",
        "BUILD_USER=\"build-agent\"\n",
        "BUILD_USER_UID=\"1100\"\n",
        "BUILD_USER_HOME=\"/home/${BUILD_USER}\"\n",
        "DATA_BUILD_USER_HOME=\"${MOUNT_POINT}${BUILD_USER_HOME}\"\n",
        "DOCKSAL_VERSION=\"master\"\n",
        "PROJECT_INACTIVITY_TIMEOUT=\"0.5h\"\n",
        "PROJECT_DANGLING_TIMEOUT=\"168h\"\n",
        "PROJECTS_ROOT=\"${BUILD_USER_HOME}/builds\"\n",
        "\n",
        "# Create build-agent user with no-password sudo access (google-sudoers group)\n",
        "# Forcing the uid to avoid race conditions with GCP creating project level users at the same time.\n",
        "# (Otherwise, we may run into something like \"useradd: UID 1001 is not unique\")\n",
        "if [[ \"$(id -u ${BUILD_USER})\" != \"${BUILD_USER_UID}\" ]]; then\n",
        "    adduser --disabled-password --gecos \"\" --uid ${BUILD_USER_UID} ${BUILD_USER}\n",
        "    usermod -aG sudo ${BUILD_USER}\n",
        "    echo \"${BUILD_USER} ALL=(ALL) NOPASSWD:ALL\" >/etc/sudoers.d/101-${BUILD_USER}\n",
        "fi\n",
        "\n",
        "# Mount the persistent data disk if it was attached\n",
        "if lsblk ${DATA_DISK} > /dev/null 2>&1; then\n",
        "    echo \"Using persistent disk: ${DATA_DISK} for data storage: ${MOUNT_POINT}\"\n",
        "\n",
        "    # Format the disk if necessary\n",
        "    if [[ $(lsblk -f ${DATA_DISK}) != *ext4* ]]; then\n",
        "    sudo mkfs.ext4 -m 0 -F -E lazy_itable_init=0,lazy_journal_init=0,discard ${DATA_DISK}\n",
        "    fi\n",
        "\n",
        "    # Mount the data disk\n",
        "    mkdir -p ${MOUNT_POINT}\n",
        "    cp /etc/fstab /etc/fstab.backup\n",
        "    # Write disk mount to /etc/fstab (so that it persists on reboots)\n",
        "    # Equivalent of `mount /dev/sdb /mnt/data`\n",
        "    echo \"${DATA_DISK}  ${MOUNT_POINT}  ext4  defaults,nofail  0 2\" | tee -a /etc/fstab\n",
        "    mount -a\n",
        "\n",
        "    # Move BUILD_USER_HOME to the data disk\n",
        "    # E.g. /home/ubuntu => /mnt/data/home/ubuntu\n",
        "    if [[ ! -d ${DATA_BUILD_USER_HOME} ]]; then\n",
        "    mkdir -p $(dirname ${DATA_BUILD_USER_HOME})\n",
        "    mv ${BUILD_USER_HOME} $(dirname ${DATA_BUILD_USER_HOME})\n",
        "    else\n",
        "    rm -rf ${BUILD_USER_HOME}\n",
        "    fi\n",
        "    ln -s ${DATA_BUILD_USER_HOME} ${BUILD_USER_HOME}\n",
        "\n",
        "    # Symlink /var/lib/docker (should not yet exist when this script runs) to the data volume\n",
        "    mkdir -p ${MOUNT_POINT}/var/lib/docker\n",
        "    ln -s ${MOUNT_POINT}/var/lib/docker /var/lib/docker\n",
        "else\n",
        "    echo \"WARNING: data volume not found. Using instance-only storage\"\n",
        "fi\n",
        "\n",
        "# Create the projects/builds directory\n",
        "mkdir -p ${PROJECTS_ROOT}\n",
        "\n",
        "# SSH settings: disable the host key check\n",
        "if [[ ! -f \"${BUILD_USER_HOME}/.ssh/config\" ]]; then\n",
        "    mkdir -p ${BUILD_USER_HOME}/.ssh\n",
        "    tee \"${BUILD_USER_HOME}/.ssh/config\" <<EOF\n",
        "Host *\n",
        "  StrictHostKeyChecking no\n",
        "  UserKnownHostsFile=/dev/null\n",
        "  LogLevel ERROR\n",
        "EOF\n",
        "    chmod 600 \"${BUILD_USER_HOME}/.ssh/config\"\n",
        "fi\n",
        "\n",
        "# Sandbox settings (set these before installing Docksal)\n",
        "# Note: do nothing if docksal.env exists from a previos installation (persistent data disk)\n",
        "if [[ ! -f ${BUILD_USER_HOME}/.docksal/docksal.env ]]; then\n",
        "    mkdir -p ${BUILD_USER_HOME}/.docksal\n",
        "    tee ${BUILD_USER_HOME}/.docksal/docksal.env <<EOF\n",
        "CI=1\n",
        "PROJECT_INACTIVITY_TIMEOUT=\"${PROJECT_INACTIVITY_TIMEOUT}\"\n",
        "PROJECT_DANGLING_TIMEOUT=\"${PROJECT_DANGLING_TIMEOUT}\"\n",
        "PROJECTS_ROOT=\"${PROJECTS_ROOT}\"\n",
        "EOF\n",
        "    # Fix permissions\n",
        "    #chown ${BUILD_USER}:${BUILD_USER} ${BUILD_USER_HOME}/.docksal/docksal.env\n",
        "fi\n",
        "\n",
        "# Fix permissions, since we are running as root here\n",
        "# Trailing slash in necessary here, since BUILD_USER_HOME is a symlink\n",
        "chown -R ${BUILD_USER}:${BUILD_USER} \"${BUILD_USER_HOME}/\"\n",
        "\n",
        "# Unlock updates\n",
        "# Necessary with existing installations (persistent data disk)\n",
        "sed -i '/DOCKSAL_LOCK_UPDATES/d' \"${BUILD_USER_HOME}/.docksal/docksal.env\" || true\n",
        "\n",
        "# Install/update Docksal and dependencies\n",
        "\n",
        "sudo -u ${BUILD_USER} sh -c \"curl -fsSL https://get.docksal.io | DOCKSAL_VERSION=${DOCKSAL_VERSION} bash\"\n",
        "\n",
        "# Lock updates (protect against unintentional updates in builds)\n",
        "echo \"DOCKSAL_LOCK_UPDATES=1\" | tee -a \"${BUILD_USER_HOME}/.docksal/docksal.env\"\n",
        "\n",
        "## This has to be done under the ubuntu user to load Docker Hub credentials\n",
        "#su - ubuntu -c 'docker run --rm -v /home/ubuntu:/data ffwagency/us-east-ci'\n",
        "#chown -R ubuntu:ubuntu /home/ubuntu/  # Trailing slash is important (when using a symlink)\n",
        "#chmod 600 /home/ubuntu/.ssh/id_rsa\n",
        "#rm -rf /home/ubuntu/.git\n",
        "\n",
        "## Reset Docksal system services to apply settings\n",
        "# su - ${BUILD_USER} -c \"fin system reset\"\n",
        "\n",
        "# Install Git LFS client\n",
        "# curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash\n",
        "# apt-get -y install git-lfs </dev/null\n"



        ]]}}
      }
    }
  },
  "Outputs" : {
    "InstanceID" : {
      "Value" : { "Ref" : "EC2Instance" }
    },
    "PublicIp" : {
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ]}
    }
  }
}
