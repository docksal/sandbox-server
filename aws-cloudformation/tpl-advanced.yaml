AWSTemplateFormatVersion: "2010-09-09"
Description: Sandbox server template (advanced)

Parameters:
  ResourceType:
    Description: |
      EC2 resource type.
      Use "ec2" (on-demand) for guaranteed server uptime.
      Use "spot" to save up to 90% of EC2 costs, if an occasional (once in a few months) instance downtime
      of 5-10 minutes is acceptable.
      Make sure to configure a persistent data volume to avoid data loss in spot mode (see below).
    Type: String
    Default: ec2
    AllowedValues:
      - ec2
      - spot
  InstanceType:
    Description: "EC2 instance type (default: t3.small = 2 vCPU, 2GB RAM)"
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
  InstanceType2:
    Description: |
      Additional EC2 instance type (spot mode only). AWS will pick the cheapest available option for spot instance.
      IMPORTANT: InstanceType, InstanceType2, and InstanceType3 must be unique, overwise stack creation/update will fail.
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
  InstanceType3:
    Description: |
      Additional EC2 instance type (spot mode only). AWS will pick the cheapest available option for spot instance.
      IMPORTANT: InstanceType, InstanceType2, and InstanceType3 must be unique, overwise stack creation/update will fail.
    Type: String
    Default: t3.large
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
    ConstraintDescription: "Must be a valid EC2 instance type"
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "Must be the name of an existing EC2 KeyPair"
  ManualAZ:
    Description: "Set instance availability zone"
    Type: AWS::EC2::AvailabilityZone::Name
  VpcId:
    Description: |
      VPC must have internet access (with Internet Gateway or Virtual Private Gateway)
      Leave empty to use the default VPC
    Type: String
    Default: ""
  SubnetId:
    Description: |
      Public subnet ID within the non-default VPC.
      Must be located in the same AZ where the instance is created.
      Required if using non-default VPC.
    Type: String
    Default: ""
  ExistingEIP:
    Description: "Use an existing Elastic IP for the instance (x.x.x.x)"
    Type: String
    Default: ""
  AccessFrom1:
    Description: |
      CIDR block to allow ingress access to the instance. Leave empty all Access From fields for unrestricted access.
    Type: String
    Default: ""
  AccessFrom2:
    Description: |
      CIDR block to allow ingress access to the instance. Leave empty all Access From fields for unrestricted access.
    Type: String
    Default: ""
  AccessFrom3:
    Description: |
      CIDR block to allow ingress access to the instance. Leave empty all Access From fields for unrestricted access.
    Type: String
    Default: ""
  ExistingDataVolume:
    Description: |
      Use an existing EBS volume for instance persistent storage.
      Must be located in the same AZ where the instance is created.
    Type: String
    Default: ""
  GitHubToken:
    Description: "Github token with read:org access level"
    Type: String
    Default: ""
  GitHubOrgName:
    Description: "Github organization machine name"
    Type: String
    Default: ""
  GitHubTeamSlug:
    Description: "Github team machine name. Users in this team will have access to Sandbox server"
    Type: String
    Default: ""
  LetsEncryptDomain:
    Description: |
      Domain name for which a wildcard LetsEncrypt certificate will be issued.
      Example: for "example.com", an SNI wildcard cert will be issued covering both "example.com" and "*.example.com".
    Type: String
    Default: ""
  LetsEncryptConfig:
    Description: |
      Configuration for automated LetsEncrypt certificate provisioning (space delimited variable="value" pairs).
      Info about available options: https://github.com/Neilpang/acme.sh/wiki/dnsapi. 
      Example: DSP="dns_aws" AWS_ACCESS_KEY_ID="aws_access_key_id" AWS_SECRET_ACCESS_KEY="aws_secret_key". 
      Note: If the domain is managed in AWS Route53 in the same AWS account, then leave this field empty to give the EC2
      instance the necessary permissions to managed TXT records in Route53.
    Type: String
    Default: ""
  EnableArtifactsBucket:
    Description: "Enable S3 artifacts bucket"
    Type: String
    Default: false
    AllowedValues:
      - false
      - true
  ArtifactsBucketName:
    Description: "Set name for the artifacts bucket. Leave empty to have the bucket name automatically generated."
    Type: String
    Default: ""
  DocksalVersion:
    Description: |
      Docksal version. Leave empty for stable release
    Type: String
    Default: ""

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Basic: Required"
        Parameters:
          - ResourceType
          - InstanceType
          - InstanceType2
          - InstanceType3
          - KeyName
          - ManualAZ
      - Label:
          default: "VPC/Network: Optional"
        Parameters:
          - VpcId
          - SubnetId
          - ExistingEIP
          - AccessFrom1
          - AccessFrom2
          - AccessFrom3
      - Label:
          default: "Storage: Optional"
        Parameters:
          - ExistingDataVolume
          - EnableArtifactsBucket
          - ArtifactsBucketName
      - Label:
          default: "Github settings: Optional"
        Parameters:
          - GitHubToken
          - GitHubOrgName
          - GitHubTeamSlug
      - Label:
          default: "LetsEncrypt settings: Optional"
        Parameters:
          - LetsEncryptDomain
          - LetsEncryptConfig
      - Label:
          default: "Docksal settings: Optional"
        Parameters:
          - DocksalVersion
    ParameterLabels:
      ResourceType:
        default: "Resource type"
      InstanceType:
        default: "Instance type"
      InstanceType2:
        default: "Instance type"
      InstanceType3:
        default: "Instance type"
      KeyName:
        default: "SSH key"
      ManualAZ:
        default: "Availability zone"
      VpcId:
        default: "VPC ID"
      SubnetId:
        default: "Subnet ID"
      ExistingEIP:
        default: "Elastic IP"
      AccessFrom1:
        default: "Access from cidr 1"
      AccessFrom2:
        default: "Access from cidr 2"
      AccessFrom3:
        default: "Access from cidr 3"
      ExistingDataVolume:
        default: "Persistent data volume"
      EnableArtifactsBucket:
        default: "Enable artifacts bucket"
      ArtifactsBucketName:
        default: "Artifacts bucket name"
      GitHubToken:
        default: "Github token"
      GitHubOrgName:
        default: "Github organization"
      GitHubTeamSlug:
        default: "Github team"
      LetsEncryptDomain:
        default: "Sandbox domain name"
      LetsEncryptConfig:
        default: "LetsEncrypt configuration"
      DocksalVersion:
        default: "Docksal version"

Mappings:
  Region2AMI:
    eu-north-1:
      AMI: ami-005bc7d72deb72a3d
    ap-south-1:
      AMI: ami-0245841fc4b40e22f
    eu-west-3:
      AMI: ami-0b70d1460d5c7a299
    eu-west-2:
      AMI: ami-00622b440d92e55c0
    eu-west-1:
      AMI: ami-04c58523038d79132
    ap-northeast-2:
      AMI: ami-02b4a5559ce53a570
    ap-northeast-1:
      AMI: ami-0f6b4f4104d26f399
    sa-east-1:
      AMI: ami-049f5d88d2d436431
    ca-central-1:
      AMI: ami-0972a0d3135cf1fc0
    ap-southeast-1:
      AMI: ami-07febfdfb4080320e
    ap-southeast-2:
      AMI: ami-04a0f7552cff370ba
    eu-central-1:
      AMI: ami-09356619876445425
    us-east-1:
      AMI: ami-00a208c7cdba991ea
    us-east-2:
      AMI: ami-059d836af932792c3
    us-west-1:
      AMI: ami-0f42d8c4eb586ccf7
    us-west-2:
      AMI: ami-0a7d051a1c4b54f65

Conditions:
  CreateEC2: !Equals [!Ref ResourceType, "ec2"]
  CreateSpot: !Equals [!Ref ResourceType, "spot"]
  ArtifactsEnabled: !Equals [!Ref EnableArtifactsBucket, "true"]
  ArtifactsBucketNameDefined: !Not [!Equals [!Ref ArtifactsBucketName, ""]]
  VpcIdDefined: !Not [!Equals [!Ref VpcId, ""]]
  SubnetIdDefined: !Not [!Equals [!Ref SubnetId, ""]]
  ExistingEIPNotDefined: !Equals [!Ref ExistingEIP, ""]
  # When LE domain is set but the LE config is empty, we give the EC2 instance access to manage TXT records in Route53.
  Route53Defined: !And
    - !Not [!Equals [!Ref LetsEncryptDomain, ""]]
    - !Equals [!Ref LetsEncryptConfig, ""]
  AccessFrom1Defined: !Not [ !Equals [!Ref AccessFrom1, ""] ]
  AccessFrom2Defined: !Not [ !Equals [!Ref AccessFrom2, ""] ]
  AccessFrom3Defined: !Not [ !Equals [!Ref AccessFrom3, ""] ]
  AccessFromUnDefined: !Not [ !Or [ Condition: AccessFrom1Defined, Condition: AccessFrom2Defined, Condition: AccessFrom3Defined ] ]

Resources:
  EIP:
    Type: AWS::EC2::EIP
    Condition: ExistingEIPNotDefined

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Condition: ArtifactsEnabled
    Properties:
      BucketName: !If [ ArtifactsBucketNameDefined, !Ref ArtifactsBucketName, !Ref "AWS::NoValue" ]
      LifecycleConfiguration:
        Rules:
          - Id: "DeleteObjectsOlderThanYear"
            ExpirationInDays: 365
            Status: Enabled

  ArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: ArtifactsEnabled
    DependsOn: ArtifactsBucket
    Properties:
      Bucket: !Ref ArtifactsBucket
      PolicyDocument:
        Statement:
          - Sid: AllowReadWriteAcces
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !If [ CreateEC2, !GetAtt ec2InstanceRole.Arn, !Ref "AWS::NoValue" ]
                - !If [ CreateSpot, !GetAtt spotInstanceRole.Arn, !Ref "AWS::NoValue" ]
            Action:
              - s3:List*
              - s3:Get*
              - s3:*Object*
            Resource:
              - !Sub arn:aws:s3:::${ArtifactsBucket}
              - !Sub arn:aws:s3:::${ArtifactsBucket}/*

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !If [ VpcIdDefined, !Ref VpcId, !Ref "AWS::NoValue" ]
      GroupDescription: 'Enable SSH, HTTP, HTTPS'

  localIngressAll:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      Description: "Allow all traffic from own external IP"
      IpProtocol: -1
      CidrIp: !Sub
        - ${eip}/32
        - eip: !If [ ExistingEIPNotDefined, !Ref EIP, !Ref ExistingEIP ]

  cidr1Ingress22:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AccessFrom1Defined
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref AccessFrom1
  cidr1Ingress80:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AccessFrom1Defined
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref AccessFrom1
  cidr1Ingress443:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AccessFrom1Defined
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref AccessFrom1

  cidr2Ingress22:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AccessFrom2Defined
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref AccessFrom2
  cidr2Ingress80:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AccessFrom2Defined
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref AccessFrom2
  cidr2Ingress443:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AccessFrom2Defined
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref AccessFrom2

  cidr3Ingress22:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AccessFrom3Defined
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref AccessFrom3
  cidr3Ingress80:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AccessFrom3Defined
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref AccessFrom3
  cidr3Ingress443:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AccessFrom3Defined
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref AccessFrom3

  cidrAllIngress22:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AccessFromUnDefined
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: "0.0.0.0/0"
  cidrAllIngress80:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AccessFromUnDefined
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: "0.0.0.0/0"
  cidrAllIngress443:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AccessFromUnDefined
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: "0.0.0.0/0"

  FleetRole:
    Type: AWS::IAM::Role
    Condition: CreateSpot
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  FleetPolicies:
    Type: AWS::IAM::Policy
    Condition: CreateSpot
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - "ec2:DescribeImages"
            - "ec2:DescribeSubnets"
            - "ec2:RequestSpotInstances"
            - "ec2:TerminateInstances"
            - "ec2:DescribeInstanceStatus"
            - "iam:PassRole"
            - "cloudformation:DescribeStacks"
            - "ec2:DescribeInstances"
            - "ec2:CreateTags"
          Resource: "*"
      Roles:
        - !Ref FleetRole

  ec2InstanceRole:
    Type: AWS::IAM::Role
    Condition: CreateEC2
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  rootInstancePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - "cloudformation:DescribeStacks"
            - "ec2:DescribeInstances"
            - "ec2:AttachVolume"
            - "ec2:DetachVolume"
            - "ec2:AssociateAddress"
            - "ec2:DisassociateAddress"
            - "ec2:DescribeVolumes"
          Resource: "*"
      Roles:
        - !If [ CreateEC2, !Ref ec2InstanceRole, !Ref "AWS::NoValue" ]
        - !If [ CreateSpot, !Ref spotInstanceRole, !Ref "AWS::NoValue" ]

  route53InstancePolicies:
    Type: AWS::IAM::Policy
    Condition: Route53Defined
    Properties:
      PolicyName: route53
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            # Permissions necessary for TXT record updates in Route53
            - "route53:GetHostedZone"
            - "route53:ListHostedZones"
            - "route53:ChangeResourceRecordSets"
            - "route53:ListResourceRecordSets"
            - "route53:GetHostedZoneCount"
            - "route53:ListHostedZonesByName"
          Resource: "*"
      Roles:
        - !If [ CreateEC2, !Ref ec2InstanceRole, !Ref "AWS::NoValue" ]
        - !If [ CreateSpot, !Ref spotInstanceRole, !Ref "AWS::NoValue" ]

  ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateEC2
    Properties:
      Path: "/"
      Roles:
        - !Ref ec2InstanceRole

  spotInstanceRole:
    Type: AWS::IAM::Role
    Condition: CreateSpot
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  spotInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateSpot
    Properties:
      Path: "/"
      Roles:
        - !Ref spotInstanceRole

  spotInstance:
    Type: 'AWS::EC2::SpotFleet'
    Condition: CreateSpot
    Properties:
      SpotFleetRequestConfigData:
        TargetCapacity: 1
        IamFleetRole: !GetAtt FleetRole.Arn
        LaunchSpecifications:
          - &instance-profile
            InstanceType: !Ref InstanceType
            IamInstanceProfile:
              Arn:
                Fn::GetAtt:
                  - spotInstanceProfile
                  - Arn
            Placement:
              AvailabilityZone: !Ref ManualAZ
            TagSpecifications:
              - ResourceType: instance
                Tags:
                - Key: StackId
                  Value: !Ref AWS::StackId
            ImageId: !FindInMap [Region2AMI, !Ref "AWS::Region", AMI]
            KeyName: !Ref KeyName
            SecurityGroups:
              - GroupId: !GetAtt InstanceSecurityGroup.GroupId
            BlockDeviceMappings:
            # Root volume
              - DeviceName: /dev/sda1
                Ebs:
                  VolumeSize: '8'
            SubnetId: !If [ SubnetIdDefined, !Ref SubnetId, !Ref "AWS::NoValue" ]
            UserData: !Base64
              'Fn::Join':
                - ''
                - - |
                # add to the end of init script echo line with template variable values, for recreate instance on every variable change
                  - !Sub
                    - echo ${eip}-${ExistingDataVolume}-${s3name}-${GitHubToken}-${GitHubOrgName}-${GitHubTeamSlug}-${LetsEncryptDomain}-${LetsEncryptConfig}-${DocksalVersion} >/dev/null
                    - s3name: !If [ ArtifactsEnabled, !Ref ArtifactsBucket, "" ]
                      eip: !If [ ExistingEIPNotDefined, !Ref EIP, !Ref ExistingEIP ]

          - <<: *instance-profile
            InstanceType: !Ref InstanceType2
          - <<: *instance-profile
            InstanceType: !Ref InstanceType3

  ec2Instance:
    Type: 'AWS::EC2::Instance'
    Condition: CreateEC2
    Properties:
      IamInstanceProfile: !Ref ec2InstanceProfile
      InstanceType: !Ref InstanceType
      AvailabilityZone: !Ref ManualAZ
      ImageId: !FindInMap [Region2AMI, !Ref "AWS::Region", AMI]
      KeyName: !Ref KeyName
      Tags:
      - Key: StackId
        Value: !Ref AWS::StackId
      SecurityGroupIds:
        - !GetAtt InstanceSecurityGroup.GroupId
      BlockDeviceMappings:
        # Root volume
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '8'
      SubnetId: !If [ SubnetIdDefined, !Ref SubnetId, !Ref "AWS::NoValue" ]
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
          # add to the end of init script echo line with template variable values, for recreate instance on every variable change
            - !Sub
              - echo ${eip}-${ExistingDataVolume}-${s3name}-${GitHubToken}-${GitHubOrgName}-${GitHubTeamSlug}-${LetsEncryptDomain}-${LetsEncryptConfig}-${DocksalVersion} >/dev/null
              - s3name: !If [ ArtifactsEnabled, !Ref ArtifactsBucket, "" ]
                eip: !If [ ExistingEIPNotDefined, !Ref EIP, !Ref ExistingEIP ]

Outputs:
  IPAddress:
    Value: !If [ ExistingEIPNotDefined, !Ref EIP, !Ref ExistingEIP ]
  InstanceURL:
    Value: !Join [ '', [ 'https://', !If [ ExistingEIPNotDefined, !Ref EIP, !Ref ExistingEIP ], '.nip.io' ] ]
  SSHConnect:
    Description: SSH connection string
    Value: !Join [ '', [ 'ssh build-agent@', !If [ ExistingEIPNotDefined, !Ref EIP, !Ref ExistingEIP ] ] ]
  PersistentVolume:
    Value: !Ref ExistingDataVolume
  ArtifactsBucket:
    Value: !If [ ArtifactsEnabled, !Ref ArtifactsBucket, "" ]
  GitHubToken:
    Value: !Ref GitHubToken
  GitHubOrgName:
    Value: !Ref GitHubOrgName
  GitHubTeamSlug:
    Value: !Ref GitHubTeamSlug
  LetsEncryptDomain:
    Value: !Ref LetsEncryptDomain
  LetsEncryptConfig:
    Value: !Ref LetsEncryptConfig
