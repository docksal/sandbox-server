AWSTemplateFormatVersion: 2010-09-09
Description: Sandbox server template

Parameters:
  InstanceType:
    Description: "EC2 instance type (default: t3.small = 2 vCPU, 2GB RAM)"
    Type: String
    # Instances with < 2GB RAM should only be used for testing the CloudFormation template
    # t3.small: 2 vCPU, 2GB RAM
    Default: t3.small
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
    ConstraintDescription: "Must be a valid EC2 instance type"
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "Must be the name of an existing EC2 KeyPair"
  DataDiskSize:
    Description: "Persistent volume size (GiB). Valid range: 20-1024"
    Type: Number
    MinValue: 20
    MaxValue: 1024
    Default: 100
  ExistingEIP:
    Description: "Use an existing Elastic IP for the instance"
    Type: String
    Default: ""
  ExistingDataVolume:
    Description: "Use an existing EBS volume for instance persistent storage. Must be located in the same availability zone where new instance will be created"
    Type: String
    Default: ""
  ManualAZ:
    Description: "Manually set instance availability zone (default: us-east-2a)"
    Type: String
    Default: "us-east-2a"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Basic: Required"
        Parameters:
          - InstanceType
          - KeyName
          - ManualAZ
      - Label:
          default: "Advanced: Optional"
        Parameters:
          - DataDiskSize
          - ExistingEIP
          - ExistingDataVolume
    ParameterLabels:
      InstanceType:
        default: "Instance type"
      KeyName:
        default: "SSH key"
      DataDiskSize:
        default: "Data disk size"
      ExistingEIP:
        default: "Elastic IP"
      ExistingDataVolume:
        default: "Persistent data volume"
      ManualAZ:
        default: "Availability zone"

Mappings:
  Region2AMI:
    ap-south-1:
      AMI: ami-0d773a3b7bb2bb1c1
    eu-west-3:
      AMI: ami-08182c55a1c188dee
    eu-west-2:
      AMI: ami-0b0a60c0a2bd40612
    eu-west-1:
      AMI: ami-00035f41c82244dab
    ap-northeast-2:
      AMI: ami-06e7b9c5e0c4dd014
    ap-northeast-1:
      AMI: ami-07ad4b1c3af1ea214
    sa-east-1:
      AMI: ami-03c6239555bb12112
    ca-central-1:
      AMI: ami-0427e8367e3770df1
    ap-southeast-1:
      AMI: ami-0c5199d385b432989
    ap-southeast-2:
      AMI: ami-07a3bd4944eb120a0
    eu-central-1:
      AMI: ami-0bdf93799014acdc4
    us-east-1:
      AMI: ami-0ac019f4fcb7cb7e6
    us-east-2:
      AMI: ami-0f65671a86f061fcd
    us-west-1:
      AMI: ami-063aa838bd7631e0b
    us-west-2:
      AMI: ami-0bbe6b35405ecebdb

Conditions:
  SetAZ: !Not [!Equals [!Ref ManualAZ, ""]]
  CreateEIP: !Equals [!Ref ExistingEIP, ""]
  CreateDataVolume: !Equals [!Ref ExistingDataVolume, ""]

Resources:
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH, HTTP, HTTPS'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0

  IPAddress:
    Type: 'AWS::EC2::EIP'
    Condition: CreateEIP

  PersistentVolume:
    Type: "AWS::EC2::Volume"
    Condition: CreateDataVolume
    Properties:
      Size: !Ref DataDiskSize
      AvailabilityZone: !Ref ManualAZ

  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - spotfleet.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: "*"
          Resource: "*"
      Roles:
        - !Ref RootRole

  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RootRole

  spotInstance:
    Type: 'AWS::EC2::SpotFleet'
    DependsOn:
      - RootRole
      - InstanceSecurityGroup
      - PersistentVolume
    Properties:
      SpotFleetRequestConfigData:
        TargetCapacity: 1
        IamFleetRole: !GetAtt RootRole.Arn
        LaunchSpecifications:
          - InstanceType: !Ref InstanceType
            IamInstanceProfile:
              Arn:
                Fn::GetAtt:
                  - RootInstanceProfile
                  - Arn
            Placement:
              AvailabilityZone: !Ref ManualAZ
            TagSpecifications:
              - ResourceType: instance
                Tags:
                - Key: stack-id
                  Value: !Ref AWS::StackId
            ImageId: !FindInMap [Region2AMI, !Ref "AWS::Region", AMI]
            KeyName: !Ref KeyName
            SecurityGroups:
              - GroupId: !GetAtt InstanceSecurityGroup.GroupId
            BlockDeviceMappings:
            # Root volume
              - DeviceName: /dev/sda1
                Ebs:
                  VolumeSize: '8'
            UserData: !Base64
              'Fn::Join':
                - ''
                - - |

Outputs:
  IPAddress:
    Value: !If [CreateEIP, !Ref IPAddress, !Ref ExistingEIP]
  PersistentVolume:
    Value: !If [CreateDataVolume, !Ref PersistentVolume, !Ref ExistingDataVolume]
  InstanceURL:
    Value: !Join [ '', [ 'https://', !If [CreateEIP, !Ref IPAddress, !Ref ExistingEIP], '.nip.io' ] ]
